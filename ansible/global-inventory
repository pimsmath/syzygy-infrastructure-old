#!/usr/bin/env python3

import json
import os
from subprocess import check_output
inventory = {
    '_meta': { 'hostvars': {} },
    'all': { 'hosts' : [] },
    'hub': { 'hosts' : [] },
    'hub_dev' : {'hosts' : [] },
    'jupyter' : {'children': [] },
}


if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser(
        prog='syzygy-global-inventory',
        description='Walks existing terraform infrastructure and builds an inventory of all machines'
    )

    parser.add_argument('--list', action='store_true')
    parser.add_argument('--host', nargs=1)

    args = parser.parse_args()

    tf_state_root = '../terraform/infrastructure/prod'
    
    if args.host:
        hosts = args.host
    else:
        hosts = next(os.walk(tf_state_root))[1]

    for host in hosts:
        myenv = os.environ.copy()
        myenv['TF_STATE'] = f"{tf_state_root}/{host}"
        d = json.loads(
                check_output(
                    ['./inventory', '-list'], 
                    env=myenv
                )
            )
        #with open(f"{host}.json", "r") as f:
        #    d = json.load(f)

        inventory['_meta']['hostvars'].update(d['_meta']['hostvars'])
        inventory['all']['hosts'].append(*d['all']['hosts'])
        if 'hub' in d:
            inventory['hub']['hosts'].append(*d['hub']['hosts'])
        if 'hub_dev' in d:
            inventory['hub_dev']['hosts'].append(*d['hub_dev']['hosts'])

    print(json.dumps(inventory))
